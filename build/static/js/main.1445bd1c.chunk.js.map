{"version":3,"sources":["Home.js","api.js","DonorList.js","CreateDonor.js","Donations.js","CreateDonation.js","App.js","serviceWorker.js","index.js"],"names":["Home","Box","textAlign","to","style","textDecoration","Button","variant","color","margin","data","fetch","body","JSON","stringify","method","then","res","json","DonorList","props","state","donors","console","log","table","this","api","setState","TableContainer","component","Paper","Table","aria-label","TableHead","TableRow","TableCell","TableBody","map","donor","name","blood_group","phone_number","id","ref","key","Component","blood_groups","value","label","CreateDonor","useState","setName","bloodGroup","setBloodGroup","phoneNumber","setPhoneNumber","TextField","onChange","event","target","select","helperText","MenuItem","onClick","catch","err","CreateDonation","netlifyIdentity","window","login","open","Routes","path","exact","Donations","App","loggedIn","setLoggedIn","userName","setUserName","on","user","user_metadata","full_name","Fragment","AppBar","position","Toolbar","IconButton","edge","Typography","className","padding","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.1445bd1c.chunk.js","sourcesContent":["import React from \"react\"\r\nimport { Link } from \"react-router-dom\"\r\nimport Button from \"@material-ui/core/Button\"\r\nimport { Box } from \"@material-ui/core\"\r\n\r\nconst Home = () => {\r\n  return (\r\n    <Box textAlign=\"center\">\r\n      <Link\r\n        to=\"/donors\"\r\n        style={{\r\n          textDecoration: \"none\",\r\n        }}\r\n      >\r\n        <Button\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          style={{\r\n            margin: \"20px\",\r\n          }}\r\n        >\r\n          Donors\r\n        </Button>\r\n      </Link>\r\n      <br />\r\n      <Link\r\n        to=\"/donations\"\r\n        style={{\r\n          textDecoration: \"none\",\r\n        }}\r\n      >\r\n        <Button\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          style={{\r\n            margin: \"20px\",\r\n          }}\r\n        >\r\n          Donations\r\n        </Button>\r\n      </Link>\r\n      <hr />\r\n      <Link\r\n        to=\"/donors/create\"\r\n        style={{\r\n          textDecoration: \"none\",\r\n        }}\r\n      >\r\n        <Button\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          style={{\r\n            margin: \"20px\",\r\n          }}\r\n        >\r\n          Add Donor\r\n        </Button>\r\n      </Link>\r\n      <br />\r\n\r\n      <Link\r\n        to=\"/donations/create\"\r\n        style={{\r\n          textDecoration: \"none\",\r\n        }}\r\n      >\r\n        <Button\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          style={{\r\n            margin: \"20px\",\r\n          }}\r\n        >\r\n          Add Donation\r\n        </Button>\r\n      </Link>\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default Home\r\n","// API Methods to call functions\r\n\r\nconst createDonor = (data) => {\r\n  return fetch(\"/.netlify/functions/createDonor\", {\r\n    body: JSON.stringify(data),\r\n    method: \"POST\",\r\n  }).then((res) => {\r\n    return res.json()\r\n  })\r\n}\r\n\r\nconst getDonors = () => {\r\n  return fetch(\"/.netlify/functions/allDonor\").then((res) => {\r\n    return res.json()\r\n  })\r\n}\r\n\r\nconst createDonation = (data) => {\r\n  return fetch(\"/.netlify/functions/createDonation\", {\r\n    body: JSON.stringify(data),\r\n    method: \"POST\",\r\n  }).then((res) => {\r\n    return res.json()\r\n  })\r\n}\r\n\r\nconst getDonations = () => {\r\n  return fetch(\"/.netlify/functions/allDonation\").then((res) => {\r\n    return res.json()\r\n  })\r\n}\r\n\r\nexport default {\r\n  createDonor: createDonor,\r\n  getDonors: getDonors,\r\n  createDonation: createDonation,\r\n  getDonations: getDonations,\r\n}\r\n","import React, { Component } from \"react\"\r\nimport { Link } from \"react-router-dom\"\r\nimport Table from \"@material-ui/core/Table\"\r\nimport TableBody from \"@material-ui/core/TableBody\"\r\nimport TableCell from \"@material-ui/core/TableCell\"\r\nimport TableContainer from \"@material-ui/core/TableContainer\"\r\nimport TableHead from \"@material-ui/core/TableHead\"\r\nimport TableRow from \"@material-ui/core/TableRow\"\r\nimport Paper from \"@material-ui/core/Paper\"\r\nimport Button from \"@material-ui/core/Button\"\r\n\r\nimport api from \"./api\"\r\n\r\nexport default class DonorList extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n\r\n    this.state = {\r\n      donors: [],\r\n    }\r\n  }\r\n  componentDidMount() {\r\n    console.log(\"Hi\")\r\n    console.table(this.state.donors)\r\n    // Calling Donors\r\n    api.getDonors().then((data) => {\r\n      this.setState({\r\n        donors: data,\r\n      })\r\n      console.table(this.state.donors)\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <TableContainer component={Paper}>\r\n        <Link\r\n          to=\"/donors/create\"\r\n          style={{\r\n            textDecoration: \"none\",\r\n          }}\r\n        >\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            style={{\r\n              margin: \"20px\",\r\n            }}\r\n          >\r\n            Add Donor\r\n          </Button>\r\n        </Link>\r\n        <Table aria-label=\"simple table\">\r\n          <TableHead>\r\n            <TableRow>\r\n              <TableCell>Name</TableCell>\r\n              <TableCell>Blood Group</TableCell>\r\n              <TableCell>Phone Number</TableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {this.state.donors.map((donor) => {\r\n              const { name, blood_group, phone_number } = donor.data\r\n              const { id } = donor.ref[\"@ref\"]\r\n              return (\r\n                <TableRow key={id}>\r\n                  <TableCell>{name}</TableCell>\r\n                  <TableCell>{blood_group}</TableCell>\r\n                  <TableCell>{phone_number}</TableCell>\r\n                </TableRow>\r\n              )\r\n            })}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n    )\r\n  }\r\n}\r\n","import React, { useState } from \"react\"\r\nimport TextField from \"@material-ui/core/TextField\"\r\nimport MenuItem from \"@material-ui/core/MenuItem\"\r\n\r\nimport api from \"./api\"\r\nconst blood_groups = [\r\n  {\r\n    value: \"A+\",\r\n    label: \"A+\",\r\n  },\r\n  {\r\n    value: \"B+\",\r\n    label: \"B+\",\r\n  },\r\n  {\r\n    value: \"AB+\",\r\n    label: \"AB+\",\r\n  },\r\n  {\r\n    value: \"O+\",\r\n    label: \"O+\",\r\n  },\r\n]\r\n\r\nfunction CreateDonor() {\r\n  const [name, setName] = useState(\"\")\r\n  const [bloodGroup, setBloodGroup] = useState(\"\")\r\n  const [phoneNumber, setPhoneNumber] = useState(\"\")\r\n\r\n  const changeName = (event) => {\r\n    setName(event.target.value)\r\n  }\r\n  const changeBloodGroup = (event) => {\r\n    setBloodGroup(event.target.value)\r\n  }\r\n  const changePhoneNumber = (event) => {\r\n    setPhoneNumber(event.target.value)\r\n  }\r\n  const submitted = () => {\r\n    api\r\n      .createDonor({\r\n        name: name,\r\n        phone_number: phoneNumber,\r\n        blood_group: bloodGroup,\r\n      })\r\n      .then((res) => {\r\n        console.log(\"Success: \", res)\r\n      })\r\n      .catch((err) => {\r\n        console.log(\"Error: \", err)\r\n      })\r\n  }\r\n  return (\r\n    <form>\r\n      <TextField\r\n        id=\"standard-name\"\r\n        label=\"Enter Donor Name\"\r\n        value={name}\r\n        onChange={changeName}\r\n      />\r\n      <br />\r\n      <TextField\r\n        id=\"standard-select-blood-group\"\r\n        select\r\n        label=\"Select Blood Group\"\r\n        value={bloodGroup}\r\n        onChange={changeBloodGroup}\r\n        helperText=\"Please select your blood group\"\r\n      >\r\n        {blood_groups.map((blood_group) => (\r\n          <MenuItem key={blood_group.value} value={blood_group.value}>\r\n            {blood_group.label}\r\n          </MenuItem>\r\n        ))}\r\n      </TextField>\r\n      <br />\r\n      <TextField\r\n        id=\"standard-phone-number\"\r\n        label=\"Enter Phone Number\"\r\n        value={phoneNumber}\r\n        onChange={changePhoneNumber}\r\n      />\r\n      <button value=\"Submit\" onClick={submitted}>\r\n        Submit\r\n      </button>\r\n    </form>\r\n  )\r\n}\r\n\r\nexport default CreateDonor\r\n","import React, { Component } from \"react\"\r\nimport { Link } from \"react-router-dom\"\r\nimport Table from \"@material-ui/core/Table\"\r\nimport TableBody from \"@material-ui/core/TableBody\"\r\nimport TableCell from \"@material-ui/core/TableCell\"\r\nimport TableContainer from \"@material-ui/core/TableContainer\"\r\nimport TableHead from \"@material-ui/core/TableHead\"\r\nimport TableRow from \"@material-ui/core/TableRow\"\r\nimport Paper from \"@material-ui/core/Paper\"\r\nimport Button from \"@material-ui/core/Button\"\r\n\r\nimport api from \"./api\"\r\n\r\nexport default class DonorList extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n\r\n    this.state = {\r\n      donors: [],\r\n    }\r\n  }\r\n  componentDidMount() {\r\n    console.log(\"Hi\")\r\n    console.table(this.state.donors)\r\n    // Calling Donors\r\n    api.getDonations().then((data) => {\r\n      this.setState({\r\n        donors: data,\r\n      })\r\n      console.table(this.state.donors)\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <TableContainer component={Paper}>\r\n        <Link\r\n          to=\"/donations/create\"\r\n          style={{\r\n            textDecoration: \"none\",\r\n          }}\r\n        >\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            style={{\r\n              margin: \"20px\",\r\n            }}\r\n          >\r\n            Add Donation\r\n          </Button>\r\n        </Link>\r\n        <Table aria-label=\"simple table\">\r\n          <TableHead>\r\n            <TableRow>\r\n              <TableCell>Name</TableCell>\r\n              <TableCell>Blood Group</TableCell>\r\n              <TableCell>Phone Number</TableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {this.state.donors.map((donor) => {\r\n              const { name, blood_group, phone_number } = donor.data\r\n              const { id } = donor.ref[\"@ref\"]\r\n              return (\r\n                <TableRow key={id}>\r\n                  <TableCell>{name}</TableCell>\r\n                  <TableCell>{blood_group}</TableCell>\r\n                  <TableCell>{phone_number}</TableCell>\r\n                </TableRow>\r\n              )\r\n            })}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n    )\r\n  }\r\n}\r\n","import React, { useState } from \"react\"\r\nimport TextField from \"@material-ui/core/TextField\"\r\nimport MenuItem from \"@material-ui/core/MenuItem\"\r\n\r\nimport api from \"./api\"\r\n\r\nconst blood_groups = [\r\n  {\r\n    value: \"A+\",\r\n    label: \"A+\",\r\n  },\r\n  {\r\n    value: \"B+\",\r\n    label: \"B+\",\r\n  },\r\n  {\r\n    value: \"AB+\",\r\n    label: \"AB+\",\r\n  },\r\n  {\r\n    value: \"O+\",\r\n    label: \"O+\",\r\n  },\r\n]\r\n\r\nfunction CreateDonation() {\r\n  const [name, setName] = useState(\"\")\r\n  const [bloodGroup, setBloodGroup] = useState(\"\")\r\n  const [phoneNumber, setPhoneNumber] = useState(\"\")\r\n\r\n  const changeName = (event) => {\r\n    setName(event.target.value)\r\n  }\r\n  const changeBloodGroup = (event) => {\r\n    setBloodGroup(event.target.value)\r\n  }\r\n  const changePhoneNumber = (event) => {\r\n    setPhoneNumber(event.target.value)\r\n  }\r\n  const submitted = () => {\r\n    api\r\n      .createDonation({\r\n        name: name,\r\n        phone_number: phoneNumber,\r\n        blood_group: bloodGroup,\r\n      })\r\n      .then((res) => {\r\n        console.log(\"Success: \", res)\r\n      })\r\n      .catch((err) => {\r\n        console.log(\"Error: \", err)\r\n      })\r\n  }\r\n  return (\r\n    <form>\r\n      <TextField\r\n        id=\"standard-name\"\r\n        label=\"Enter Donor Name\"\r\n        value={name}\r\n        onChange={changeName}\r\n      />\r\n      <br />\r\n      <TextField\r\n        id=\"standard-select-blood-group\"\r\n        select\r\n        label=\"Select Blood Group\"\r\n        value={bloodGroup}\r\n        onChange={changeBloodGroup}\r\n        helperText=\"Please select your blood group\"\r\n      >\r\n        {blood_groups.map((blood_group) => (\r\n          <MenuItem key={blood_group.value} value={blood_group.value}>\r\n            {blood_group.label}\r\n          </MenuItem>\r\n        ))}\r\n      </TextField>\r\n      <br />\r\n      <TextField\r\n        id=\"standard-phone-number\"\r\n        label=\"Enter Phone Number\"\r\n        value={phoneNumber}\r\n        onChange={changePhoneNumber}\r\n      />\r\n      <button value=\"Submit\" onClick={submitted}>\r\n        Submit\r\n      </button>\r\n    </form>\r\n  )\r\n}\r\n\r\nexport default CreateDonation\r\n","import React, { useState } from \"react\"\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\"\nimport Home from \"./Home\"\nimport DonorList from \"./DonorList\"\nimport CreateDonor from \"./CreateDonor\"\nimport Donations from \"./Donations\"\nimport CreateDonation from \"./CreateDonation\"\nimport AppBar from \"@material-ui/core/AppBar\"\nimport Toolbar from \"@material-ui/core/Toolbar\"\nimport Button from \"@material-ui/core/Button\"\nimport IconButton from \"@material-ui/core/IconButton\"\nimport Typography from \"@material-ui/core/Typography\"\n\nimport HomeIcon from \"@material-ui/icons/Home\"\nimport LockOutlinedIcon from \"@material-ui/icons/LockOutlined\"\n\nconst { netlifyIdentity } = window\n\nconst login = () => {\n  netlifyIdentity.open()\n}\n\nconst Routes = () => {\n  return (\n    <div>\n      <Route path=\"/\" exact component={Home} />\n      <Route path=\"/donors\" exact component={DonorList} />\n      <Route path=\"/donors/create\" component={CreateDonor} />\n      <Route path=\"/donations\" exact component={Donations} />\n      <Route path=\"/donations/create\" component={CreateDonation} />\n    </div>\n  )\n}\nconst App = () => {\n  const [loggedIn, setLoggedIn] = useState(false)\n  const [userName, setUserName] = useState(\"\")\n\n  // not needed at this moment as app is invite only.\n  // const [isAdmin, setIsAdmin] = useState(false)\n\n  // Checks if user is logged in\n  netlifyIdentity.on(\"init\", (user) => {\n    if (user) {\n      setLoggedIn(true)\n\n      // Check if user is admin\n      // not needed at this moment as app is invite only.\n      // const userRole = user.app_metadata.roles[0]\n      // if (userRole === \"Admin\") {\n      //   setIsAdmin(true)\n      // }\n\n      // Set username\n      setUserName(user.user_metadata.full_name)\n    } else {\n      setLoggedIn(false)\n    }\n  })\n  // Triggers when user logs in\n\n  netlifyIdentity.on(\"login\", (user) => {\n    setLoggedIn(true)\n    // Set username\n    setUserName(user.user_metadata.full_name)\n  })\n\n  // Triggers when user logs out\n  netlifyIdentity.on(\"logout\", () => {\n    setLoggedIn(false)\n  })\n\n  return (\n    <React.Fragment>\n      <Router>\n        <AppBar position=\"static\">\n          <Toolbar>\n            <Link to=\"/\">\n              <IconButton\n                edge=\"start\"\n                style={{\n                  color: \"white\",\n                }}\n                aria-label=\"menu\"\n              >\n                <HomeIcon />\n              </IconButton>\n            </Link>\n            <Typography\n              className=\"username\"\n              style={{\n                padding: \"0 15px\",\n              }}\n              variant=\"p\"\n            >\n              {loggedIn ? `Logged In as ${userName}` : `Logged Out`}\n            </Typography>\n            <Button variant=\"contained\" color=\"secondary\" onClick={login}>\n              {loggedIn ? <LockOutlinedIcon /> : <LockOutlinedIcon />}\n            </Button>\n          </Toolbar>\n        </AppBar>\n        {loggedIn ? <Routes /> : `Not Logged In`}\n      </Router>\n    </React.Fragment>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}